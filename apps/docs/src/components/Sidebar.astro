---
import type { Props } from '@astrojs/starlight/props'
import { AstroError } from 'astro/errors'
import Default from '@astrojs/starlight/components/Sidebar.astro'

// Remix of https://starlight-utils.pages.dev/utilities/multi-sidebar/

export type SidebarData = {
	starlightProps: Props
	labelEntry: Props['sidebar'][number]
}

const lang = Astro.props.lang
const multiSidebarData: Array<SidebarData> = Astro.props.sidebar.map((entry) => {
	if (entry.type !== 'group') {
		throw new AstroError(
			`\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
		)
	}

	return {
		starlightProps: { ...Astro.props, sidebar: [...entry.entries] },
		labelEntry: entry
	}
})
---

<multi-sidebar lang={lang}>
	{
		multiSidebarData.map(({ starlightProps, labelEntry }) => (
			<div hidden data-starlight-multi-sidebar-label={labelEntry.label}>
				<Default {...starlightProps} />
			</div>
		))
	}
</multi-sidebar>

<script>
	class Sidebar extends HTMLElement {
		sidebars: NodeListOf<HTMLDivElement>
		location: string
		current: string
		observer: MutationObserver
		lang: string
		constructor() {
			super()
			this.sidebars = this.querySelectorAll('div[data-starlight-multi-sidebar-label]')

			this.location = document.location.href
			this.current = ''
			this.lang = this.getAttribute('lang')!

			this.observer = new MutationObserver(() => {
				if (this.location !== document.location.href) {
					this.location = document.location.href
					this.toggleSidebars()
				}
			})
			this.observer.observe(document.body, { childList: true, subtree: true })
			this.toggleSidebars()

			window.addEventListener('unload', () => {
				this.observer.disconnect()
			})
		}
		toggleSidebars() {
			// assign current correctly
			if (this.lang != 'en') {
				this.current = window.location.pathname.split('/')[2]
				if (this.current == 'reference') {
					this.current = window.location.pathname.split('/')[3]
				}
			} else {
				this.current = window.location.pathname.split('/')[1]
				if (this.current == 'reference') {
					this.current = window.location.pathname.split('/')[2]
				}
			}
			// set the divs to hidden unless they're the current
			for (let i = 0; i < this.sidebars.length; i++) {
				const element = this.sidebars[i]
				if (element.getAttribute('data-starlight-multi-sidebar-label') === this.current) {
					element.removeAttribute('hidden')
				} else {
					element.setAttribute('hidden', 'true')
				}
			}
		}
	}
	customElements.define('multi-sidebar', Sidebar)
</script>
