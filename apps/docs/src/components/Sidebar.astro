---
// copied from https://github.com/lorenzolewis/starlight-utils/blob/main/packages/starlight-utils/components/Sidebar.astro
import type { Props } from '@astrojs/starlight/props'
import { AstroError } from 'astro/errors'
import Default from '@astrojs/starlight/components/Sidebar.astro'

interface Link {
  type: 'link'
  label: string
  href: string
  isCurrent: boolean
  // @ts-ignore
  badge: Badge | undefined
  // @ts-ignore
  attrs: LinkHTMLAttributes
}

interface Group {
  type: 'group'
  label: string
  entries: (Link | Group)[]
  collapsed: boolean
  // @ts-ignore
  badge: Badge | undefined
}

type SidebarEntry = Link | Group

type SidebarData = {
  isCurrentSidebar: boolean
  newSidebar: SidebarEntry[]
  labelEntry: Props['sidebar'][number]
}

// Styles and CSS logic derived from https://daisyui.com/components/collapse/

// This Sidebar override uses the top-level items from the Starlight sidebar config to create sidebars.

// Go through each top-level sidebar item from the Astro config to...
// 1. Validate the config is set up correctly
// 2. Create a new derived set of `Astro.props` that only contains one set of sidebar entries
// 3. Check if the current page being rendered is current page to determine if this sidebar group should be selected

const multiSidebarData: Array<SidebarData> = Astro.props.sidebar.map((entry) => {
  if (entry.type !== 'group') {
    throw new AstroError(
      `\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
    )
  }

  // Recursively check if a group of sidebar entries contains the current page
  const findIfIsCurrent = (entry: (typeof Astro.props.sidebar)[number]): boolean => {
    if (entry.type === 'link') {
      return entry.isCurrent
    }
    return entry.entries.some((item) => findIfIsCurrent(item))
  }

  const isCurrentPage = findIfIsCurrent(entry)

  return {
    isCurrentSidebar: isCurrentPage,
    newSidebar: [...entry.entries],
    labelEntry: entry
  }
})
---

{
  multiSidebarData.map(({ newSidebar, isCurrentSidebar, labelEntry }) => (
    <div
      class:list={[!isCurrentSidebar && 'hidden']}
      data-starlight-multi-sidebar-label={labelEntry.label}
    >
      <Default
        {...Astro.props}
        sidebar={newSidebar}
      />
    </div>
  ))
}
